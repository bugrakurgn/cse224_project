
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/pinarizmir/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/top_module_project4/src/ALU.v
Parsing SystemVerilog input from `/openlane/designs/top_module_project4/src/ALU.v' to AST representation.
Storing AST representation for module `$abstract\ALU'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/top_module_project4/src/RegisterFile.v
Parsing SystemVerilog input from `/openlane/designs/top_module_project4/src/RegisterFile.v' to AST representation.
Storing AST representation for module `$abstract\RegisterFile'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/top_module_project4/src/top_module_project4.v
Parsing SystemVerilog input from `/openlane/designs/top_module_project4/src/top_module_project4.v' to AST representation.
Storing AST representation for module `$abstract\top_module_project4'.
Successfully finished Verilog frontend.

5. Executing HIERARCHY pass (managing design hierarchy).

6. Executing AST frontend in derive mode using pre-parsed AST for module `\top_module_project4'.
Generating RTLIL representation for module `\top_module_project4'.

6.1. Analyzing design hierarchy..
Top module:  \top_module_project4

6.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

6.3. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.

6.4. Analyzing design hierarchy..
Top module:  \top_module_project4
Used module:     \ALU
Used module:     \RegisterFile

6.5. Analyzing design hierarchy..
Top module:  \top_module_project4
Used module:     \ALU
Used module:     \RegisterFile
Removing unused module `$abstract\top_module_project4'.
Removing unused module `$abstract\RegisterFile'.
Removing unused module `$abstract\ALU'.
Removed 3 unused modules.

7. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/top_module_project4/runs/RUN_2025.05.27_18.11.56/tmp/synthesis/hierarchy.dot'.
Dumping module top_module_project4 to page 1.
Renaming module top_module_project4 to top_module_project4.

8. Executing TRIBUF pass.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \top_module_project4
Used module:     \ALU
Used module:     \RegisterFile

9.2. Analyzing design hierarchy..
Top module:  \top_module_project4
Used module:     \ALU
Used module:     \RegisterFile
Removed 0 unused modules.

10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

11. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/openlane/designs/top_module_project4/src/ALU.v:8$1 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/top_module_project4/src/ALU.v:8$1 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/top_module_project4/src/RegisterFile.v:15$9 in module RegisterFile.
Removed a total of 1 dead cases.

12. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

13. Executing PROC_INIT pass (extract init attributes).

14. Executing PROC_ARST pass (detect async resets in processes).

15. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

16. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU.$proc$/openlane/designs/top_module_project4/src/ALU.v:8$1'.
     1/1: $1\result[31:0]
Creating decoders for process `\RegisterFile.$proc$/openlane/designs/top_module_project4/src/RegisterFile.v:15$9'.
     1/3: $1$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$15
     2/3: $1$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_DATA[31:0]$14
     3/3: $1$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_ADDR[4:0]$13

17. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ALU.\result' from process `\ALU.$proc$/openlane/designs/top_module_project4/src/ALU.v:8$1'.

18. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_ADDR' using process `\RegisterFile.$proc$/openlane/designs/top_module_project4/src/RegisterFile.v:15$9'.
  created $dff cell `$procdff$30' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_DATA' using process `\RegisterFile.$proc$/openlane/designs/top_module_project4/src/RegisterFile.v:15$9'.
  created $dff cell `$procdff$31' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN' using process `\RegisterFile.$proc$/openlane/designs/top_module_project4/src/RegisterFile.v:15$9'.
  created $dff cell `$procdff$32' with positive edge clock.

19. Executing PROC_MEMWR pass (convert process memory writes to cells).

20. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/top_module_project4/src/ALU.v:8$1'.
Removing empty process `ALU.$proc$/openlane/designs/top_module_project4/src/ALU.v:8$1'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/designs/top_module_project4/src/RegisterFile.v:15$9'.
Removing empty process `RegisterFile.$proc$/openlane/designs/top_module_project4/src/RegisterFile.v:15$9'.
Cleaned up 2 empty switches.

21. Executing CHECK pass (checking for obvious problems).
Checking module top_module_project4...
Checking module ALU...
Checking module RegisterFile...
Found and reported 0 problems.

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module RegisterFile.

23. Executing FLATTEN pass (flatten design).
Deleting now unused module ALU.
Deleting now unused module RegisterFile.
<suppressed ~2 debug messages>

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..
Removed 3 unused cells and 17 unused wires.
<suppressed ~4 debug messages>

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module_project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module_project4.
    Consolidated identical input bits for $mux cell $flatten\RF.$procmux$22:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12
      New ports: A=1'0, B=1'1, Y=$flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0]
      New connections: $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [31:1] = { $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] $flatten\RF.$0$memwr$\registers$/openlane/designs/top_module_project4/src/RegisterFile.v:17$6_EN[31:0]$12 [0] }
  Optimizing cells in module \top_module_project4.
Performed a total of 1 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module_project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module_project4.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing FSM pass (extract and optimize FSM).

27.1. Executing FSM_DETECT pass (finding FSMs in design).

27.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

27.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module_project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module_project4.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

28.9. Finished OPT passes. (There is nothing left to do.)

29. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell top_module_project4.$flatten\ALU_inst.$procmux$19_CMP0 ($eq).

30. Executing PEEPOPT pass (run peephole optimizers).

31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

32. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top_module_project4:
  creating $macc model for $flatten\ALU_inst.$add$/openlane/designs/top_module_project4/src/ALU.v:10$2 ($add).
  creating $macc model for $flatten\ALU_inst.$sub$/openlane/designs/top_module_project4/src/ALU.v:11$3 ($sub).
  creating $alu model for $macc $flatten\ALU_inst.$sub$/openlane/designs/top_module_project4/src/ALU.v:11$3.
  creating $alu model for $macc $flatten\ALU_inst.$add$/openlane/designs/top_module_project4/src/ALU.v:10$2.
  creating $alu cell for $flatten\ALU_inst.$add$/openlane/designs/top_module_project4/src/ALU.v:10$2: $auto$alumacc.cc:485:replace_alu$34
  creating $alu cell for $flatten\ALU_inst.$sub$/openlane/designs/top_module_project4/src/ALU.v:11$3: $auto$alumacc.cc:485:replace_alu$37
  created 2 $alu and 0 $macc cells.

33. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module top_module_project4 that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\ALU_inst.$shr$/openlane/designs/top_module_project4/src/ALU.v:13$5 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\ALU_inst.$procmux$17_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\ALU_inst.$shl$/openlane/designs/top_module_project4/src/ALU.v:12$4 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\ALU_inst.$procmux$18_CMP.
    No candidates found.

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module_project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module_project4.
Performed a total of 0 changes.

34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

34.6. Executing OPT_DFF pass (perform DFF optimizations).

34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

34.9. Finished OPT passes. (There is nothing left to do.)

35. Executing MEMORY pass.

35.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

35.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

35.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing top_module_project4.RF.registers write port 0.

35.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

35.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\RF.registers'[0] in module `\top_module_project4': no output FF found.
Checking read port `\RF.registers'[1] in module `\top_module_project4': no output FF found.
Checking read port address `\RF.registers'[0] in module `\top_module_project4': no address FF found.
Checking read port address `\RF.registers'[1] in module `\top_module_project4': no address FF found.

35.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

35.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory top_module_project4.RF.registers by address:

35.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

35.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

35.10. Executing MEMORY_COLLECT pass (generating $mem cells).

36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.
<suppressed ~4 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

37.5. Finished fast OPT passes.

38. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \RF.registers in module \top_module_project4:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.
<suppressed ~10 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

39.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module_project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

39.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module_project4.
Performed a total of 0 changes.

39.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

39.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\ALU_inst.$procmux$16 in front of them:
        $auto$alumacc.cc:485:replace_alu$37
        $auto$alumacc.cc:485:replace_alu$34

39.7. Executing OPT_DFF pass (perform DFF optimizations).

39.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..
Removed 0 unused cells and 107 unused wires.
<suppressed ~1 debug messages>

39.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

39.10. Rerunning OPT passes. (Maybe there is more to do..)

39.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module_project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

39.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module_project4.
    New ctrl vector for $pmux cell $flatten\ALU_inst.$procmux$16: { $flatten\ALU_inst.$procmux$18_CMP $flatten\ALU_inst.$procmux$17_CMP }
  Optimizing cells in module \top_module_project4.
Performed a total of 1 changes.

39.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

39.14. Executing OPT_SHARE pass.

39.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\RF.registers[9]$62 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[9]).
Adding EN signal on $memory\RF.registers[8]$60 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[8]).
Adding EN signal on $memory\RF.registers[7]$58 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[7]).
Adding EN signal on $memory\RF.registers[6]$56 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[6]).
Adding EN signal on $memory\RF.registers[5]$54 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[5]).
Adding EN signal on $memory\RF.registers[4]$52 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[4]).
Adding EN signal on $memory\RF.registers[3]$50 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[3]).
Adding EN signal on $memory\RF.registers[31]$106 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[31]).
Adding EN signal on $memory\RF.registers[30]$104 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[30]).
Adding EN signal on $memory\RF.registers[2]$48 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[2]).
Adding EN signal on $memory\RF.registers[29]$102 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[29]).
Adding EN signal on $memory\RF.registers[28]$100 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[28]).
Adding EN signal on $memory\RF.registers[27]$98 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[27]).
Adding EN signal on $memory\RF.registers[26]$96 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[26]).
Adding EN signal on $memory\RF.registers[25]$94 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[25]).
Adding EN signal on $memory\RF.registers[24]$92 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[24]).
Adding EN signal on $memory\RF.registers[23]$90 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[23]).
Adding EN signal on $memory\RF.registers[22]$88 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[22]).
Adding EN signal on $memory\RF.registers[21]$86 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[21]).
Adding EN signal on $memory\RF.registers[20]$84 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[20]).
Adding EN signal on $memory\RF.registers[1]$46 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[1]).
Adding EN signal on $memory\RF.registers[19]$82 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[19]).
Adding EN signal on $memory\RF.registers[18]$80 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[18]).
Adding EN signal on $memory\RF.registers[17]$78 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[17]).
Adding EN signal on $memory\RF.registers[16]$76 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[16]).
Adding EN signal on $memory\RF.registers[15]$74 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[15]).
Adding EN signal on $memory\RF.registers[14]$72 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[14]).
Adding EN signal on $memory\RF.registers[13]$70 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[13]).
Adding EN signal on $memory\RF.registers[12]$68 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[12]).
Adding EN signal on $memory\RF.registers[11]$66 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[11]).
Adding EN signal on $memory\RF.registers[10]$64 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[10]).
Adding EN signal on $memory\RF.registers[0]$44 ($dff) from module top_module_project4 (D = \WD3_regfile, Q = \RF.registers[0]).

39.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

39.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

39.18. Rerunning OPT passes. (Maybe there is more to do..)

39.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module_project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

39.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module_project4.
Performed a total of 0 changes.

39.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

39.22. Executing OPT_SHARE pass.

39.23. Executing OPT_DFF pass (perform DFF optimizations).

39.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

39.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

39.26. Finished OPT passes. (There is nothing left to do.)

40. Executing TECHMAP pass (map to technology primitives).

40.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

40.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1665 debug messages>

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.
<suppressed ~258 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
<suppressed ~180 debug messages>
Removed a total of 60 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..
Removed 21 unused cells and 286 unused wires.
<suppressed ~22 debug messages>

41.5. Finished fast OPT passes.

42. Executing ABC pass (technology mapping using ABC).

42.1. Extracting gate netlist of module `\top_module_project4' to `<abc-temp-dir>/input.blif'..
Extracted 3045 gates and 4152 wires to a netlist network with 1106 inputs and 128 outputs.

42.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

42.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               NOR cells:       36
ABC RESULTS:               XOR cells:       87
ABC RESULTS:               MUX cells:     2305
ABC RESULTS:               NOT cells:       68
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              NAND cells:       16
ABC RESULTS:                OR cells:      321
ABC RESULTS:            ANDNOT cells:      172
ABC RESULTS:        internal signals:     2918
ABC RESULTS:           input signals:     1106
ABC RESULTS:          output signals:      128
Removing temp directory.

43. Executing OPT pass (performing simple optimizations).

43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.
<suppressed ~1089 debug messages>

43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

43.3. Executing OPT_DFF pass (perform DFF optimizations).

43.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..
Removed 9 unused cells and 1512 unused wires.
<suppressed ~10 debug messages>

43.5. Finished fast OPT passes.

44. Executing HIERARCHY pass (managing design hierarchy).

44.1. Analyzing design hierarchy..
Top module:  \top_module_project4

44.2. Analyzing design hierarchy..
Top module:  \top_module_project4
Removed 0 unused modules.

45. Printing statistics.

=== top_module_project4 ===

   Number of wires:               2978
   Number of wire bits:           4368
   Number of public wires:          56
   Number of public wire bits:    1446
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4042
     $_ANDNOT_                     172
     $_AND_                          2
     $_DFFE_PP_                   1024
     $_MUX_                       2305
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87

46. Executing CHECK pass (checking for obvious problems).
Checking module top_module_project4...
Found and reported 0 problems.

47. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/top_module_project4/runs/RUN_2025.05.27_18.11.56/tmp/synthesis/post_techmap.dot'.
Dumping module top_module_project4 to page 1.

48. Executing SHARE pass (SAT-based resource sharing).

49. Executing OPT pass (performing simple optimizations).

49.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

49.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

49.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module_project4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

49.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module_project4.
Performed a total of 0 changes.

49.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module_project4'.
Removed a total of 0 cells.

49.6. Executing OPT_DFF pass (perform DFF optimizations).

49.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..

49.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module_project4.

49.9. Finished OPT passes. (There is nothing left to do.)

50. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..
Removed 0 unused cells and 12 unused wires.
<suppressed ~12 debug messages>

51. Printing statistics.

=== top_module_project4 ===

   Number of wires:               2966
   Number of wire bits:           4157
   Number of public wires:          44
   Number of public wire bits:    1235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4042
     $_ANDNOT_                     172
     $_AND_                          2
     $_DFFE_PP_                   1024
     $_MUX_                       2305
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87

mapping tbuf

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/pinarizmir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/pinarizmir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing TECHMAP pass (map to technology primitives).

54.1. Executing Verilog-2005 frontend: /home/pinarizmir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/pinarizmir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

54.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

55. Executing SIMPLEMAP pass (map simple cells to gate primitives).

56. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

56.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\top_module_project4':
  mapped 1024 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

57. Printing statistics.

=== top_module_project4 ===

   Number of wires:               3990
   Number of wire bits:           5181
   Number of public wires:          44
   Number of public wire bits:    1235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5066
     $_ANDNOT_                     172
     $_AND_                          2
     $_MUX_                       3329
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87
     sky130_fd_sc_hd__dfxtp_2     1024

[INFO]: USING STRATEGY AREA 0

58. Executing ABC pass (technology mapping using ABC).

58.1. Extracting gate netlist of module `\top_module_project4' to `/tmp/yosys-abc-iNXw7r/input.blif'..
Extracted 4042 gates and 5180 wires to a netlist network with 1138 inputs and 1120 outputs.

58.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-iNXw7r/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-iNXw7r/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-iNXw7r/input.blif 
ABC: + read_lib -w /openlane/designs/top_module_project4/runs/RUN_2025.05.27_18.11.56/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/top_module_project4/runs/RUN_2025.05.27_18.11.56/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/top_module_project4/runs/RUN_2025.05.27_18.11.56/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/top_module_project4/runs/RUN_2025.05.27_18.11.56/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 15000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 15000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 15000 
ABC: Current delay (5138.31 ps) does not exceed the target delay (15000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 15000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   4146 ( 35.1 %)   Cap = 12.3 ff ( 15.5 %)   Area =    40566.41 ( 51.3 %)   Delay =  5246.86 ps  (  0.9 %)               
ABC: Path  0 --    1036 : 0    3 pi                       A =   0.00  Df =  18.3  -10.6 ps  S =  31.0 ps  Cin =  0.0 ff  Cout =   5.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    3496 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df = 644.3 -403.9 ps  S =  94.5 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 310.4 ff  G =  140  
ABC: Path  2 --    3497 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df = 839.3 -345.9 ps  S = 303.6 ps  Cin =  2.1 ff  Cout =  25.4 ff  Cmax = 130.0 ff  G = 1138  
ABC: Path  3 --    3803 : 3    4 sky130_fd_sc_hd__or3_2   A =   7.51  Df =1343.6 -646.8 ps  S =  98.6 ps  Cin =  1.5 ff  Cout =   9.7 ff  Cmax = 310.4 ff  G =  601  
ABC: Path  4 --    3804 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df =1549.5 -563.4 ps  S = 338.6 ps  Cin =  2.1 ff  Cout =  28.3 ff  Cmax = 130.0 ff  G = 1260  
ABC: Path  5 --    4004 : 4    3 sky130_fd_sc_hd__or4_2   A =   8.76  Df =2146.4 -953.7 ps  S = 122.3 ps  Cin =  1.5 ff  Cout =   8.7 ff  Cmax = 310.4 ff  G =  546  
ABC: Path  6 --    4026 : 3    3 sky130_fd_sc_hd__or3_2   A =   7.51  Df =2602.9-1285.1 ps  S =  95.7 ps  Cin =  1.5 ff  Cout =   8.7 ff  Cmax = 310.4 ff  G =  540  
ABC: Path  7 --    4040 : 3    1 sky130_fd_sc_hd__o21a_2  A =   8.76  Df =2828.3-1380.2 ps  S =  64.2 ps  Cin =  2.4 ff  Cout =   8.4 ff  Cmax = 294.8 ff  G =  346  
ABC: Path  8 --    4041 : 2    3 sky130_fd_sc_hd__xnor2_2 A =  16.27  Df =3067.8-1446.8 ps  S = 278.5 ps  Cin =  8.5 ff  Cout =  18.2 ff  Cmax = 121.8 ff  G =  205  
ABC: Path  9 --    4042 : 2    2 sky130_fd_sc_hd__xor2_2  A =  16.27  Df =3328.4-1531.4 ps  S = 180.6 ps  Cin =  8.6 ff  Cout =  10.8 ff  Cmax = 130.0 ff  G =  121  
ABC: Path 10 --    4052 : 2    2 sky130_fd_sc_hd__or2b_2  A =   8.76  Df =3641.5-1677.8 ps  S =  54.6 ps  Cin =  1.6 ff  Cout =   3.9 ff  Cmax = 312.2 ff  G =  234  
ABC: Path 11 --    4053 : 3    1 sky130_fd_sc_hd__or3_2   A =   7.51  Df =4040.1-1117.5 ps  S =  73.3 ps  Cin =  1.5 ff  Cout =   2.6 ff  Cmax = 310.4 ff  G =  156  
ABC: Path 12 --    4054 : 3    2 sky130_fd_sc_hd__a21o_2  A =   8.76  Df =4241.5-1233.1 ps  S =  45.9 ps  Cin =  2.4 ff  Cout =   6.1 ff  Cmax = 309.5 ff  G =  252  
ABC: Path 13 --    4064 : 3    3 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =4422.0 -783.3 ps  S = 176.5 ps  Cin =  4.6 ff  Cout =  11.9 ff  Cmax = 128.2 ff  G =  246  
ABC: Path 14 --    4101 : 3    2 sky130_fd_sc_hd__o21ba_2 A =  10.01  Df =4621.9 -750.2 ps  S =  79.6 ps  Cin =  2.1 ff  Cout =  11.0 ff  Cmax = 264.6 ff  G =  511  
ABC: Path 15 --    4104 : 4    1 sky130_fd_sc_hd__a22o_2  A =  10.01  Df =4778.6 -663.7 ps  S =  65.3 ps  Cin =  2.3 ff  Cout =   9.0 ff  Cmax = 301.2 ff  G =  369  
ABC: Path 16 --    4108 : 2    1 sky130_fd_sc_hd__xnor2_2 A =  16.27  Df =4915.9 -647.2 ps  S = 122.6 ps  Cin =  8.5 ff  Cout =   4.7 ff  Cmax = 121.8 ff  G =   52  
ABC: Path 17 --    4115 : 3    1 sky130_fd_sc_hd__o21ai_2 A =   8.76  Df =5246.9 -827.4 ps  S = 399.2 ps  Cin =  4.5 ff  Cout =  33.4 ff  Cmax = 139.2 ff  G =  735  
ABC: Start-point = pi1035 (\inputB_alu [0]).  End-point = po95 (\result_alu [31]).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1138/ 1120  lat =    0  nd =  4146  edge =  11146  area =40560.62  delay =17.00  lev = 17
ABC: + write_blif /tmp/yosys-abc-iNXw7r/output.blif 

58.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       39
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       39
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      557
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       42
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       68
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       72
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1363
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     1438
ABC RESULTS:        internal signals:     2922
ABC RESULTS:           input signals:     1138
ABC RESULTS:          output signals:     1120
Removing temp directory.

59. Executing SETUNDEF pass (replace undef values with defined constants).

60. Executing HILOMAP pass (mapping to constant drivers).

61. Executing SPLITNETS pass (splitting up multi-bit signals).

62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module_project4..
Removed 0 unused cells and 5180 unused wires.
<suppressed ~1 debug messages>

63. Executing INSBUF pass (insert buffer cells for connected wires).

64. Executing CHECK pass (checking for obvious problems).
Checking module top_module_project4...
Found and reported 0 problems.

65. Printing statistics.

=== top_module_project4 ===

   Number of wires:               5086
   Number of wire bits:           5285
   Number of public wires:        1036
   Number of public wire bits:    1235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5170
     sky130_fd_sc_hd__a2111o_2       1
     sky130_fd_sc_hd__a211o_2       24
     sky130_fd_sc_hd__a21bo_2        2
     sky130_fd_sc_hd__a21boi_2       3
     sky130_fd_sc_hd__a21o_2        36
     sky130_fd_sc_hd__a21oi_2       23
     sky130_fd_sc_hd__a221o_2       36
     sky130_fd_sc_hd__a22o_2        12
     sky130_fd_sc_hd__a22oi_2        2
     sky130_fd_sc_hd__a311oi_2       2
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2        14
     sky130_fd_sc_hd__and2b_2       39
     sky130_fd_sc_hd__and3_2         7
     sky130_fd_sc_hd__and3b_2        6
     sky130_fd_sc_hd__buf_1       1438
     sky130_fd_sc_hd__dfxtp_2     1024
     sky130_fd_sc_hd__inv_2         17
     sky130_fd_sc_hd__mux2_2      1363
     sky130_fd_sc_hd__mux4_2       557
     sky130_fd_sc_hd__nand2_2       72
     sky130_fd_sc_hd__nand2b_2       3
     sky130_fd_sc_hd__nand3_2        3
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2        53
     sky130_fd_sc_hd__nor2b_2        4
     sky130_fd_sc_hd__nor3_2         2
     sky130_fd_sc_hd__o211a_2       16
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2        68
     sky130_fd_sc_hd__o21ai_2       19
     sky130_fd_sc_hd__o21ba_2       37
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2       13
     sky130_fd_sc_hd__o22a_2        42
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       4
     sky130_fd_sc_hd__o311a_2        4
     sky130_fd_sc_hd__o31a_2        17
     sky130_fd_sc_hd__o32a_2         7
     sky130_fd_sc_hd__o41a_2         5
     sky130_fd_sc_hd__or2_2         43
     sky130_fd_sc_hd__or2b_2        39
     sky130_fd_sc_hd__or3_2         16
     sky130_fd_sc_hd__or3b_2         7
     sky130_fd_sc_hd__or4_2         11
     sky130_fd_sc_hd__or4b_2         2
     sky130_fd_sc_hd__or4bb_2        2
     sky130_fd_sc_hd__xnor2_2       40
     sky130_fd_sc_hd__xor2_2        24

   Chip area for module '\top_module_project4': 62347.296000

66. Executing Verilog backend.
Dumping module `\top_module_project4'.

67. Executing JSON backend.

End of script. Logfile hash: 4ce5097bc3, CPU: user 0.94s system 0.01s, MEM: 45.87 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 79% 2x abc (3 sec), 4% 24x opt_expr (0 sec), ...
